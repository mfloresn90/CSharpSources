<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<Page
    x:Class="TextSegmentation.GetCurrentTextSegmentFromIndex"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:TextSegmentation"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1"  TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" Text="For any text, it is possible to find the bounds between segments in that text. The most commonly desired segments are 'word' and 'selection' segments. Word Segments represent language-specific words in the text. Selection segments are similar to word segments, but represent the bounds between active selections (ie, if you were actively selecting this text, the bounds would identify where the selection would snap to).&#13;&#13;Both word and selection segments are language-specific, and employ that language's word breaking logic to identify these segments within the text. A language tag is recommended to specify the language-behavior rules to use; if no language tag is provided, language-neutral word-breaking rules will be used.&#13;&#13;This scenario will allow you to enter a string of text and specify a character index (0-based) within the string, and get the returned word or selection segment that contains the index that was given." />
            <StackPanel Margin="0,10,0,0" Grid.Row="1">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Width="200" HorizontalAlignment="Left" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" Text="Input String: "></TextBlock>
                    <TextBox x:Name="inputStringBox" Margin="2" Height="40" Width="Auto" MinWidth="200" Padding="5" AutomationProperties.Name="Input String Box"></TextBox>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Width="200" HorizontalAlignment="Left" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" Text="Language Tag: "></TextBlock>
                    <TextBox x:Name="languageTagBox" Margin="2" Height="40" Width="Auto" MinWidth="100" Padding="5" AutomationProperties.Name="Language Tag Box"></TextBox>
                </StackPanel>
                <StackPanel Orientation="Horizontal" Margin="0 0 0 25">
                    <TextBlock Width="200" HorizontalAlignment="Left" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" Text="Index: "></TextBlock>
                    <TextBox x:Name="indexBox" Margin="2" Height="40" Width="Auto" MinWidth="100" Padding="5" AutomationProperties.Name="Index Box"></TextBox>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <Button x:Name="WordSegmentButton" Content="Word Segment" Margin="0,0,10,0" Click="WordSegmentButton_Click" AutomationProperties.Name="Words Segments Button" />
                    <Button x:Name="SelectionSegmentButton"  Content="Selection Segment" Margin="0,0,10,0" Click="SelectionSegmentButton_Click" AutomationProperties.Name="Selection Segments Button" />
                </StackPanel>
            </StackPanel>
            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputDefaultLayout"/>
                    <VisualState x:Name="InputBelow768Layout"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="OutputDefaultLayout"/>
                    <VisualState x:Name="OutputBelow768Layout"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
     </Grid>
</Page>
