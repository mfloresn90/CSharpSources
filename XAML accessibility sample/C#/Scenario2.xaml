<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="Accessibility.Scenario2"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Accessibility"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="{StaticResource ApplicationPageBackgroundThemeBrush}">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1" Grid.Row="0" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left"
                       AutomationProperties.AutomationId="InputTextBlock1" AutomationProperties.Name="Text describing Scenario 2">
                By default, the TAB key will cycle through controls in the order they are declared in XAML. 
                You can customize this behavior by setting the TabIndex and IsTabStop properties, as shown in the demonstration below.
            </TextBlock>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <StackPanel x:Name="Scenario2Output" 
            Background="Transparent" 
            PointerPressed="GiveControlFocus" >
                <Border BorderBrush="LightBlue" BorderThickness="4" CornerRadius="4">
                    <StackPanel Margin="5">
                        <TextBlock Text="Custom tab sequence (click in the container then press TAB to test)" Style="{StaticResource BasicTextStyle}" AutomationProperties.AutomationId="Scenario2Label" AutomationProperties.Name="Custom tab sequence (click in the container then press TAB to test)"/>
                        <Button Content="Second" TabIndex="2" AutomationProperties.AutomationId="SecondButton" AutomationProperties.Name="Second Button"/>
                        <Button Content="Skipped" IsTabStop="False" AutomationProperties.AutomationId="SkippedButton" AutomationProperties.Name="Skipped Button"/>
                        <Button Content="First" TabIndex="1" AutomationProperties.AutomationId="FirstButton" AutomationProperties.Name="First Button"/>
                        <Button Content="Default (receives focus later)" AutomationProperties.AutomationId="DefaultButton" AutomationProperties.Name="Default Button"/>
                    </StackPanel>
                </Border>
            </StackPanel>
        </Grid>

        <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="DefaultLayout"/>
                <VisualState x:Name="Below768Layout"/>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

    </Grid>
</common:LayoutAwarePage>
