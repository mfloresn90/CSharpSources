<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="AdvancedManipulations.Scenario2"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:AdvancedManipulations"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1" Grid.Row="0" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                The new ViewChanging API provides predictive information regarding the next view, final view and if an ongoing panning/zooming operation is inertial. The example below illustrates the behavior of this API.
                <LineBreak />
                <LineBreak />
                Pan/zoom the image below with/without inertia. Notice the predicted values and actual values in the output fields.
            </TextBlock>
            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputFullScreenLandscape"/>
                    <VisualState x:Name="InputFilled"/>
                    <VisualState x:Name="InputFullScreenPortrait"/>
                    <VisualState x:Name="InputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ScrollViewer Grid.Column="0" x:Name="scrollViewer" Width="650" Height="500"
                      HorizontalAlignment="Left" VerticalAlignment="Top"
                      VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" 
		              VerticalScrollMode="Auto" HorizontalScrollMode="Auto"
                      ZoomMode="Enabled">
                <Image Width="1000" AutomationProperties.Name="Image of Mount Rainier" Source="Images/Rainier.jpg" Stretch="None"/>
            </ScrollViewer>
            <StackPanel Grid.Column="1" Orientation="Vertical" Margin="10,0,0,0" >
                <StackPanel Orientation="Horizontal">
                    <TextBlock Style="{StaticResource BasicTextStyle}" Text="The current panning/zooming action is:" />
                    <TextBlock Style="{StaticResource BasicTextStyle}" FontWeight="Bold" Foreground="Red" x:Name="isInertialOutputText" Margin="10,0,0,0" TextWrapping="Wrap"/>
                </StackPanel>
                <TextBlock Style="{StaticResource BasicTextStyle}" Text="The predicted and actual views for the current panning/zooming action are:" />
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <TextBlock Margin="10,10,0,0" Grid.Row="0" Grid.Column="1" Style="{StaticResource BasicTextStyle}" Text="Predicted NextView" />
                    <TextBlock Margin="10,10,0,0" Grid.Row="0" Grid.Column="2" Style="{StaticResource BasicTextStyle}" Text="Actual NextView" />
                    <TextBlock Margin="10,10,0,0" Grid.Row="0" Grid.Column="3" Style="{StaticResource BasicTextStyle}" Text="Predicted FinalView" />
                    <TextBlock Margin="10,10,0,0" Grid.Row="0" Grid.Column="4" Style="{StaticResource BasicTextStyle}" Text="Actual FinalView" />
                    <TextBlock Margin="10,10,0,0" Grid.Row="1" Grid.Column="0" Style="{StaticResource BasicTextStyle}" Text="Horizontal Offset" />
                    <TextBlock Margin="10,10,0,0" Grid.Row="2" Grid.Column="0" Style="{StaticResource BasicTextStyle}" Text="Vertical Offset" />
                    <TextBlock Margin="10,10,0,0" Grid.Row="3" Grid.Column="0" Style="{StaticResource BasicTextStyle}" Text="Zoom Factor" />

                    <TextBlock Margin="10,10,0,0" Grid.Row="1" Grid.Column="1" Style="{StaticResource BasicTextStyle}" FontWeight="Bold" Foreground="Red" x:Name="predictedNextHOText" />
                    <TextBlock Margin="10,10,0,0" Grid.Row="1" Grid.Column="2"  Style="{StaticResource BasicTextStyle}" FontWeight="Bold" Foreground="Green" x:Name="actualNextHOText" />
                    <TextBlock Margin="10,10,0,0" Grid.Row="1" Grid.Column="3" Style="{StaticResource BasicTextStyle}" FontWeight="Bold" Foreground="Red" x:Name="predictedFinalHOText" />
                    <TextBlock Margin="10,10,0,0" Grid.Row="1" Grid.Column="4"  Style="{StaticResource BasicTextStyle}" FontWeight="Bold" Foreground="Green" x:Name="actualFinalHOText" />

                    <TextBlock Margin="10,10,0,0" Grid.Row="2" Grid.Column="1" Style="{StaticResource BasicTextStyle}" FontWeight="Bold" Foreground="Red" x:Name="predictedNextVOText" />
                    <TextBlock Margin="10,10,0,0" Grid.Row="2" Grid.Column="2"  Style="{StaticResource BasicTextStyle}" FontWeight="Bold" Foreground="Green" x:Name="actualNextVOText" />
                    <TextBlock Margin="10,10,0,0" Grid.Row="2" Grid.Column="3" Style="{StaticResource BasicTextStyle}" FontWeight="Bold" Foreground="Red" x:Name="predictedFinalVOText" />
                    <TextBlock Margin="10,10,0,0" Grid.Row="2" Grid.Column="4"  Style="{StaticResource BasicTextStyle}" FontWeight="Bold" Foreground="Green" x:Name="actualFinalVOText" />

                    <TextBlock Margin="10,10,0,0" Grid.Row="3" Grid.Column="1" Style="{StaticResource BasicTextStyle}" FontWeight="Bold" Foreground="Red" x:Name="predictedNextZFText" />
                    <TextBlock Margin="10,10,0,0" Grid.Row="3" Grid.Column="2"  Style="{StaticResource BasicTextStyle}" FontWeight="Bold" Foreground="Green" x:Name="actualNextZFText" />
                    <TextBlock Margin="10,10,0,0" Grid.Row="3" Grid.Column="3" Style="{StaticResource BasicTextStyle}" FontWeight="Bold" Foreground="Red" x:Name="predictedFinalZFText" />
                    <TextBlock Margin="10,10,0,0" Grid.Row="3" Grid.Column="4"  Style="{StaticResource BasicTextStyle}" FontWeight="Bold" Foreground="Green" x:Name="actualFinalZFText" />
                </Grid>
            </StackPanel>
            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="OutputFullScreenLandscape"/>
                    <VisualState x:Name="OutputFilled"/>
                    <VisualState x:Name="OutputFullScreenPortrait"/>
                    <VisualState x:Name="OutputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </Grid>
</common:LayoutAwarePage>
