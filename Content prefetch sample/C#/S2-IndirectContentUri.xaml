<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="SDKTemplate.IndirectContentUriScenario"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKTemplate"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1" Grid.Row="0" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                This scenario allows you to add an indirect content uri for content prefetching or clear the indirect content uri. 
                To make the operating system perform a prefetch of these contents in a developer scenario for testing, use Visual Studio’s ContentPrefetcher integration. You can access it by selecting <Bold FontWeight="SemiBold">Debug</Bold> &#x25B8; <Bold FontWeight="SemiBold">Other Debug Targets</Bold> &#x25B8; <Bold FontWeight="SemiBold">Trigger Windows Store App Prefetch</Bold> in Visual Studio.
            </TextBlock>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputDefaultLayout"/>
                    <VisualState x:Name="InputBelow768Layout"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <StackPanel Orientation="Horizontal">
                <StackPanel>
                    <TextBlock x:Name="IndirectContentUriBlock" FontSize="16">The indirect content uri is </TextBlock>
                    <TextBox x:Name="IndirectContentUriBox"></TextBox>
                    <StackPanel Orientation="Horizontal">
                        <Button x:Name="SetIndirectContentUri" Click="SetIndirectContentUri_Click">Set uri</Button>
                        <Button x:Name="ClearIndirectContentUri" Click="ClearIndirectContentUri_Click" Content="Clear uri"/>
                    </StackPanel>
                </StackPanel>
            </StackPanel>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="OutputDefaultLayout"/>
                    <VisualState x:Name="OutputBelow768Layout"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </Grid>
</common:LayoutAwarePage>
