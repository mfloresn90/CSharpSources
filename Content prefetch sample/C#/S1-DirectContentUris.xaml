<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="SDKTemplate.DirectContentUriScenario"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:SDKTemplate"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1" Grid.Row="0" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                This scenario allows you to add an indirect content uri for content prefetching or clear the indirect content uri. 
                To make the operating system perform a prefetch of these contents in a developer scenario for testing, use Visual Studio’s ContentPrefetcher integration. You can access it by selecting <Bold FontWeight="SemiBold">Debug</Bold> &#x25B8; <Bold FontWeight="SemiBold">Other Debug Targets</Bold> &#x25B8; <Bold FontWeight="SemiBold">Trigger Windows Store App Prefetch</Bold> in Visual Studio.
            </TextBlock>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputDefaultLayout"/>
                    <VisualState x:Name="InputBelow768Layout"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <Grid x:Name="ContentUrisGrid">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>

                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>

                <Rectangle Fill="#00b2f0" Grid.Row="0" Grid.Column="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"/>
                <TextBlock Grid.Row="0" Grid.Column="0" FontSize="14" Padding="0, 15, 0, 15">Content URI</TextBlock>

                <Rectangle Fill="#00b2f0" Grid.Row="0" Grid.Column="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />
                <TextBlock Grid.Row="0" Grid.Column="1" FontSize="14" Padding="0, 15, 0, 15">Is content in cache?</TextBlock>

                <StackPanel x:Name="DirectContentUris" Orientation="Vertical" Grid.Row="1" Grid.Column="0">
                </StackPanel>

                <StackPanel x:Name="UriCacheStatus" Grid.Row="1" Grid.Column="1">
                </StackPanel>

                <TextBox x:Name="DirectContentUri" Grid.Row="2" Grid.ColumnSpan="2" Margin="0, 10, 0, 0" Text="http://www.microsoft.com/favicon.ico"></TextBox>
                <StackPanel Orientation="Horizontal" Grid.Row="3">
                    <Button x:Name="AddDirectUri" Click="AddDirectUri_Click">Add Uri</Button>
                    <Button x:Name="ClearDirectUris" Click="ClearDirectUris_Click">Clear Uris</Button>
                </StackPanel>
            </Grid>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="OutputDefaultLayout"/>
                    <VisualState x:Name="OutputBelow768Layout"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </Grid>
</common:LayoutAwarePage>