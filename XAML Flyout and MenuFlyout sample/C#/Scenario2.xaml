<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="Flyouts.Scenario2"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Flyouts"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">
    <Page.Resources>
        <SolidColorBrush x:Key="blueBrush" Color="Blue"/>
        <SolidColorBrush x:Key="orangeBrush" Color="Orange"/>
        <SolidColorBrush x:Key="greenBrush" Color="Green"/>
        <SolidColorBrush x:Key="purpleBrush" Color="Purple"/>
        <Flyout x:Name="sharedFlyout">
            <StackPanel>
                <TextBlock Text="This is a shared Flyout." Style="{StaticResource BasicTextStyle}"/>
                <TextBlock Width="350" TextWrapping="Wrap" Text="This text color depends on the DataContext of the invoking Button." Foreground="{Binding}" Style="{StaticResource BasicTextStyle}" />
            </StackPanel>
        </Flyout>
    </Page.Resources>

    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                This scenario demonstrates how to share a single Flyout instance between multiple Buttons.  The Flyout inherits the invoking element's DataContext.  In this scenario, the four Buttons below each have different DataContexts that are represented by color, and the Flyout can bind to the same data as the invoking Button.  
                <LineBreak/><LineBreak/>
                This scenario is also applicable to MenuFlyouts.
            </TextBlock>

            <StackPanel Grid.Row="1">
                <StackPanel Orientation="Horizontal">
                    <Button x:Name="button1" DataContext="{StaticResource blueBrush}" Foreground="{Binding}" Content="Blue Button" Margin="0,0,10,0" Click="button_Click" Flyout="{StaticResource sharedFlyout}"/>
                    <Button x:Name="button2" DataContext="{StaticResource orangeBrush}" Foreground="{Binding}" Content="Orange Button" Margin="0,0,10,0" Click="button_Click" Flyout="{StaticResource sharedFlyout}"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <Button x:Name="button3" DataContext="{StaticResource greenBrush}" Foreground="{Binding}" Content="Green Button" Margin="0,0,10,0" Click="button_Click" Flyout="{StaticResource sharedFlyout}"/>
                    <Button x:Name="button4" DataContext="{StaticResource purpleBrush}" Foreground="{Binding}" Content="Purple Button" Margin="0,0,10,0" Click="button_Click" Flyout="{StaticResource sharedFlyout}"/>
                </StackPanel>
            </StackPanel>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
        </Grid>
    </Grid>
</common:LayoutAwarePage>
