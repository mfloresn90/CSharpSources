<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="Animation.Scenario1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Animation"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap">
                Animations change property values over a given period of time by calculating intermediate 
                values between given initial and final values. The values can be of various types including 
                Color, Double, Point, and so on depending on the property being animated.
                <LineBreak/>
                <LineBreak/>
                In the demonstration below, the Rectangle's Canvas.Left property increases from 0 to 300 over 3 seconds. 
                The animation is set to loop indefinitely.
            </TextBlock>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <Grid.Resources>
                <Storyboard x:Name="Scenario1Storyboard">
                    <!-- This animation will animate the value of the Canvas.Left property of the rectangle Scenario1Rectangle to 300. -->
                    <DoubleAnimation
                            Storyboard.TargetName="Scenario1Rectangle"
                            Storyboard.TargetProperty="(Canvas.Left)"
                            Duration="0:0:3"
                            To="300"
                            RepeatBehavior="Forever"/>
                </Storyboard>
            </Grid.Resources>
            <Canvas Width="400" Height="100">
                <Rectangle Name="Scenario1Rectangle" Width="100" Height="100" Fill="Indigo" />
            </Canvas>
        </Grid>

        <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="DefaultLayout"/>
                <VisualState x:Name="Below768Layout"/>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</common:LayoutAwarePage>
