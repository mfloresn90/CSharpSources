<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="Animation.Scenario2"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Animation"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1" Grid.Row="0" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                Different types of animation work with different value types and calculate intermediate property values in different ways.
                <LineBreak/>
                <LineBreak/>
                The first square below uses a ColorAnimation and a DoubleAnimation to animate property values of type Color and Double using the default linear interpolation to create a smooth rate of change between initial and final values.
                <LineBreak/>
                <LineBreak/>
                The second square below replaces ColorAnimation and DoubleAnimation with versions that use keyframes. Keyframes indicate specific intermediate values to occur at specific times, and also indicate how to calculate values between those times. The demonstration uses three discrete keyframes followed by an easing keyframe to create a more complex animation.
            </TextBlock>
            <Button x:Name="Scenario2ToggleStoryboard" Grid.Row="1" Content="Begin storyboards" Margin="0,0,10,0" />
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <Grid.Resources>
                <Storyboard x:Name="Scenario2ContinuousStoryboard">
                    <!-- This animation will animate the fill color of the rectangle Scenario2ContinuousRectangle to Green. 
            Note that the EnableDependentAnimation flag must be set to True in order to run this animation, as the 
            fill color cannot be indepedently animated. 
    -->
                    <ColorAnimation
                            EnableDependentAnimation="true"
                            Storyboard.TargetName="Scenario2ContinuousRectangle"
                            Storyboard.TargetProperty="(Rectangle.Fill).(SolidColorBrush.Color)"
                            Duration="0:0:3"
                            To="Green"
                            />

                    <!-- This animation will animate the value of the Canvas.Left property of the rectangle Scenario2ContinuousRectangle to 300. -->
                    <DoubleAnimation
                            Storyboard.TargetName="Scenario2ContinuousRectangle"
                            Storyboard.TargetProperty="(Canvas.Left)"
                            Duration="0:0:3"
                            To="300"
                            />
                </Storyboard>

                <Storyboard x:Name="Scenario2KeyFrameStoryboard">
                    <!-- This animation will animate the fill color of the rectangle Scenario2KeyFrameRectangle to Green, using
            keyframes to control the interpolation method. Note that the EnableDependentAnimation flag must be set to True
            in order to run this animation, as the fill color cannot be indepedently animated.
    -->
                    <ColorAnimationUsingKeyFrames
                            EnableDependentAnimation="true"
                            Storyboard.TargetName="Scenario2KeyFrameRectangle"
                            Storyboard.TargetProperty="(Rectangle.Fill).(SolidColorBrush.Color)"
                            Duration="0:0:3"
                            >
                        <DiscreteColorKeyFrame KeyTime="0:0:0.5" Value="Red" />
                        <DiscreteColorKeyFrame KeyTime="0:0:1" Value="Orange" />
                        <DiscreteColorKeyFrame KeyTime="0:0:2" Value="Blue" />
                        <EasingColorKeyFrame KeyTime="0:0:3" Value="Green" />
                    </ColorAnimationUsingKeyFrames>

                    <!-- This animation will animate the value of the Canvas.Left property of the rectangle Scenario2KeyFrameRectangle to 300, using
            keyframes to control the interpolation method.
    -->
                    <DoubleAnimationUsingKeyFrames
                            Storyboard.TargetName="Scenario2KeyFrameRectangle"
                            Storyboard.TargetProperty="(Canvas.Left)"
                            Duration="0:0:3"
                            >
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.5" Value="50" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:1" Value="100" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:2" Value="200" />
                        <EasingDoubleKeyFrame KeyTime="0:0:3" Value="300" />
                    </DoubleAnimationUsingKeyFrames>
                </Storyboard>
            </Grid.Resources>
            <StackPanel>
                <Canvas Width="400" Height="100">
                    <Rectangle Name="Scenario2ContinuousRectangle" Width="100" Height="100" Fill="Indigo" />
                </Canvas>
                <Canvas Width="400" Height="100" Margin="0,20,0,0">
                    <Rectangle Name="Scenario2KeyFrameRectangle" Width="100" Height="100" Fill="Indigo" />
                </Canvas>
            </StackPanel>
        </Grid>

        <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="DefaultLayout"/>
                <VisualState x:Name="Below768Layout"/>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

    </Grid>
</common:LayoutAwarePage>
