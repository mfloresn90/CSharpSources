// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
#pragma warning disable 1591, 3008, 3009
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static partial class MVC
{
    public static MVCBlog.Website.Controllers.AboutController About = new MVCBlog.Website.Controllers.T4MVC_AboutController();
    public static MVCBlog.Website.Controllers.AdministrationController Administration = new MVCBlog.Website.Controllers.T4MVC_AdministrationController();
    public static MVCBlog.Website.Controllers.BlogController Blog = new MVCBlog.Website.Controllers.T4MVC_BlogController();
    public static MVCBlog.Website.Controllers.ErrorController Error = new MVCBlog.Website.Controllers.T4MVC_ErrorController();
    public static MVCBlog.Website.Controllers.ImprintController Imprint = new MVCBlog.Website.Controllers.T4MVC_ImprintController();
    public static MVCBlog.Website.Controllers.LoginController Login = new MVCBlog.Website.Controllers.T4MVC_LoginController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string _references_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/_references.min.js") ? Url("_references.min.js") : Url("_references.js");
        public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
        public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
        public static readonly string custom_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/custom.min.js") ? Url("custom.min.js") : Url("custom.js");
        public static readonly string customEditBlogEntry_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/customEditBlogEntry.min.js") ? Url("customEditBlogEntry.min.js") : Url("customEditBlogEntry.js");
        public static readonly string feedstatisticschart_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/feedstatisticschart.min.js") ? Url("feedstatisticschart.min.js") : Url("feedstatisticschart.js");
        public static readonly string jquery_2_1_1_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.1.1.intellisense.min.js") ? Url("jquery-2.1.1.intellisense.min.js") : Url("jquery-2.1.1.intellisense.js");
        public static readonly string jquery_2_1_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.1.1.min.js") ? Url("jquery-2.1.1.min.js") : Url("jquery-2.1.1.js");
        public static readonly string jquery_2_1_1_min_js = Url("jquery-2.1.1.min.js");
        public static readonly string jquery_2_1_1_min_map = Url("jquery-2.1.1.min.map");
        public static readonly string jquery_autocomplete_pack_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.autocomplete.pack.min.js") ? Url("jquery.autocomplete.pack.min.js") : Url("jquery.autocomplete.pack.js");
        public static readonly string jquery_lightbox_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.lightbox.min.js") ? Url("jquery.lightbox.min.js") : Url("jquery.lightbox.js");
        public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
        public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
        public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
        public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
        public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
        public static readonly string popup_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/popup.min.js") ? Url("popup.min.js") : Url("popup.js");
        public static readonly string raphael_min_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/raphael-min.min.js") ? Url("raphael-min.min.js") : Url("raphael-min.js");
        public static readonly string raphael_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/raphael.min.js") ? Url("raphael.min.js") : Url("raphael.js");
        public static readonly string respond_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/respond.min.js") ? Url("respond.min.js") : Url("respond.js");
        public static readonly string respond_matchmedia_addListener_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/respond.matchmedia.addListener.min.js") ? Url("respond.matchmedia.addListener.min.js") : Url("respond.matchmedia.addListener.js");
        public static readonly string respond_matchmedia_addListener_min_js = Url("respond.matchmedia.addListener.min.js");
        public static readonly string respond_min_js = Url("respond.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class SyntaxHighlighter {
            private const string URLPATH = "~/Scripts/SyntaxHighlighter";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string shAutoloader_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shAutoloader.min.js") ? Url("shAutoloader.min.js") : Url("shAutoloader.js");
            public static readonly string shBrushAppleScript_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushAppleScript.min.js") ? Url("shBrushAppleScript.min.js") : Url("shBrushAppleScript.js");
            public static readonly string shBrushAS3_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushAS3.min.js") ? Url("shBrushAS3.min.js") : Url("shBrushAS3.js");
            public static readonly string shBrushBash_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushBash.min.js") ? Url("shBrushBash.min.js") : Url("shBrushBash.js");
            public static readonly string shBrushColdFusion_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushColdFusion.min.js") ? Url("shBrushColdFusion.min.js") : Url("shBrushColdFusion.js");
            public static readonly string shBrushCpp_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushCpp.min.js") ? Url("shBrushCpp.min.js") : Url("shBrushCpp.js");
            public static readonly string shBrushCSharp_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushCSharp.min.js") ? Url("shBrushCSharp.min.js") : Url("shBrushCSharp.js");
            public static readonly string shBrushCss_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushCss.min.js") ? Url("shBrushCss.min.js") : Url("shBrushCss.js");
            public static readonly string shBrushDelphi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushDelphi.min.js") ? Url("shBrushDelphi.min.js") : Url("shBrushDelphi.js");
            public static readonly string shBrushDiff_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushDiff.min.js") ? Url("shBrushDiff.min.js") : Url("shBrushDiff.js");
            public static readonly string shBrushErlang_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushErlang.min.js") ? Url("shBrushErlang.min.js") : Url("shBrushErlang.js");
            public static readonly string shBrushGroovy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushGroovy.min.js") ? Url("shBrushGroovy.min.js") : Url("shBrushGroovy.js");
            public static readonly string shBrushJava_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushJava.min.js") ? Url("shBrushJava.min.js") : Url("shBrushJava.js");
            public static readonly string shBrushJavaFX_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushJavaFX.min.js") ? Url("shBrushJavaFX.min.js") : Url("shBrushJavaFX.js");
            public static readonly string shBrushJScript_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushJScript.min.js") ? Url("shBrushJScript.min.js") : Url("shBrushJScript.js");
            public static readonly string shBrushPerl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushPerl.min.js") ? Url("shBrushPerl.min.js") : Url("shBrushPerl.js");
            public static readonly string shBrushPhp_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushPhp.min.js") ? Url("shBrushPhp.min.js") : Url("shBrushPhp.js");
            public static readonly string shBrushPlain_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushPlain.min.js") ? Url("shBrushPlain.min.js") : Url("shBrushPlain.js");
            public static readonly string shBrushPowerShell_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushPowerShell.min.js") ? Url("shBrushPowerShell.min.js") : Url("shBrushPowerShell.js");
            public static readonly string shBrushPython_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushPython.min.js") ? Url("shBrushPython.min.js") : Url("shBrushPython.js");
            public static readonly string shBrushRuby_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushRuby.min.js") ? Url("shBrushRuby.min.js") : Url("shBrushRuby.js");
            public static readonly string shBrushSass_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushSass.min.js") ? Url("shBrushSass.min.js") : Url("shBrushSass.js");
            public static readonly string shBrushScala_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushScala.min.js") ? Url("shBrushScala.min.js") : Url("shBrushScala.js");
            public static readonly string shBrushSql_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushSql.min.js") ? Url("shBrushSql.min.js") : Url("shBrushSql.js");
            public static readonly string shBrushVb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushVb.min.js") ? Url("shBrushVb.min.js") : Url("shBrushVb.js");
            public static readonly string shBrushXml_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushXml.min.js") ? Url("shBrushXml.min.js") : Url("shBrushXml.js");
            public static readonly string shCore_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shCore.min.js") ? Url("shCore.min.js") : Url("shCore.js");
            public static readonly string shLegacy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shLegacy.min.js") ? Url("shLegacy.min.js") : Url("shLegacy.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class tiny_mce {
            private const string URLPATH = "~/Scripts/tiny_mce";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_tinymce_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.tinymce.min.js") ? Url("jquery.tinymce.min.js") : Url("jquery.tinymce.js");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class langs {
                private const string URLPATH = "~/Scripts/tiny_mce/langs";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
            }
        
            public static readonly string license_txt = Url("license.txt");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class plugins {
                private const string URLPATH = "~/Scripts/tiny_mce/plugins";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class advhr {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/advhr";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class css {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/advhr/css";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string advhr_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/advhr.min.css") ? Url("advhr.min.css") : Url("advhr.css");
                             
                    }
                
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class js {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/advhr/js";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string rule_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/rule.min.js") ? Url("rule.min.js") : Url("rule.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class langs {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/advhr/langs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string en_dlg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en_dlg.min.js") ? Url("en_dlg.min.js") : Url("en_dlg.js");
                    }
                
                    public static readonly string rule_htm = Url("rule.htm");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class advimage {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/advimage";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class css {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/advimage/css";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string advimage_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/advimage.min.css") ? Url("advimage.min.css") : Url("advimage.css");
                             
                    }
                
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                    public static readonly string image_htm = Url("image.htm");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class img {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/advimage/img";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string sample_gif = Url("sample.gif");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class js {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/advimage/js";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string image_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/image.min.js") ? Url("image.min.js") : Url("image.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class langs {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/advimage/langs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string en_dlg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en_dlg.min.js") ? Url("en_dlg.min.js") : Url("en_dlg.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class advlink {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/advlink";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class css {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/advlink/css";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string advlink_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/advlink.min.css") ? Url("advlink.min.css") : Url("advlink.css");
                             
                    }
                
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class js {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/advlink/js";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string advlink_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/advlink.min.js") ? Url("advlink.min.js") : Url("advlink.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class langs {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/advlink/langs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string en_dlg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en_dlg.min.js") ? Url("en_dlg.min.js") : Url("en_dlg.js");
                    }
                
                    public static readonly string link_htm = Url("link.htm");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class autoresize {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/autoresize";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class example {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/example";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string dialog_htm = Url("dialog.htm");
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class img {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/example/img";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string example_gif = Url("example.gif");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class js {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/example/js";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string dialog_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog.min.js") ? Url("dialog.min.js") : Url("dialog.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class langs {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/example/langs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                        public static readonly string en_dlg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en_dlg.min.js") ? Url("en_dlg.min.js") : Url("en_dlg.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class fullpage {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/fullpage";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class css {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/fullpage/css";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string fullpage_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fullpage.min.css") ? Url("fullpage.min.css") : Url("fullpage.css");
                             
                    }
                
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                    public static readonly string fullpage_htm = Url("fullpage.htm");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class js {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/fullpage/js";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string fullpage_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fullpage.min.js") ? Url("fullpage.min.js") : Url("fullpage.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class langs {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/fullpage/langs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string en_dlg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en_dlg.min.js") ? Url("en_dlg.min.js") : Url("en_dlg.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class fullscreen {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/fullscreen";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                    public static readonly string fullscreen_htm = Url("fullscreen.htm");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class inlinepopups {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/inlinepopups";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class skins {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/inlinepopups/skins";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class clearlooks2 {
                            private const string URLPATH = "~/Scripts/tiny_mce/plugins/inlinepopups/skins/clearlooks2";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class img {
                                private const string URLPATH = "~/Scripts/tiny_mce/plugins/inlinepopups/skins/clearlooks2/img";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string alert_gif = Url("alert.gif");
                                public static readonly string button_gif = Url("button.gif");
                                public static readonly string buttons_gif = Url("buttons.gif");
                                public static readonly string confirm_gif = Url("confirm.gif");
                                public static readonly string corners_gif = Url("corners.gif");
                                public static readonly string horizontal_gif = Url("horizontal.gif");
                                public static readonly string vertical_gif = Url("vertical.gif");
                            }
                        
                            public static readonly string window_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/window.min.css") ? Url("window.min.css") : Url("window.css");
                                 
                        }
                    
                    }
                
                    public static readonly string template_htm = Url("template.htm");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class nonbreaking {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/nonbreaking";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class noneditable {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/noneditable";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class paste {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/paste";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class js {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/paste/js";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string pastetext_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pastetext.min.js") ? Url("pastetext.min.js") : Url("pastetext.js");
                        public static readonly string pasteword_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pasteword.min.js") ? Url("pasteword.min.js") : Url("pasteword.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class langs {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/paste/langs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string en_dlg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en_dlg.min.js") ? Url("en_dlg.min.js") : Url("en_dlg.js");
                    }
                
                    public static readonly string pastetext_htm = Url("pastetext.htm");
                    public static readonly string pasteword_htm = Url("pasteword.htm");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class preview {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/preview";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                    public static readonly string example_html = Url("example.html");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class jscripts {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/preview/jscripts";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string embed_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/embed.min.js") ? Url("embed.min.js") : Url("embed.js");
                    }
                
                    public static readonly string preview_html = Url("preview.html");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class print {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/print";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class searchreplace {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/searchreplace";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class css {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/searchreplace/css";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string searchreplace_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/searchreplace.min.css") ? Url("searchreplace.min.css") : Url("searchreplace.css");
                             
                    }
                
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class js {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/searchreplace/js";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string searchreplace_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/searchreplace.min.js") ? Url("searchreplace.min.js") : Url("searchreplace.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class langs {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/searchreplace/langs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string en_dlg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en_dlg.min.js") ? Url("en_dlg.min.js") : Url("en_dlg.js");
                    }
                
                    public static readonly string searchreplace_htm = Url("searchreplace.htm");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class spellchecker {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/spellchecker";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class css {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/spellchecker/css";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string content_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/content.min.css") ? Url("content.min.css") : Url("content.css");
                             
                    }
                
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class img {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/spellchecker/img";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string wline_gif = Url("wline.gif");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class style {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/style";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class css {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/style/css";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string props_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/props.min.css") ? Url("props.min.css") : Url("props.css");
                             
                    }
                
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class js {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/style/js";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string props_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/props.min.js") ? Url("props.min.js") : Url("props.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class langs {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/style/langs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string en_dlg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en_dlg.min.js") ? Url("en_dlg.min.js") : Url("en_dlg.js");
                    }
                
                    public static readonly string props_htm = Url("props.htm");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class syntaxhighlighter {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/syntaxhighlighter";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class tabfocus {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/tabfocus";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class table {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/table";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string cell_htm = Url("cell.htm");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class css {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/table/css";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string cell_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cell.min.css") ? Url("cell.min.css") : Url("cell.css");
                             
                        public static readonly string row_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/row.min.css") ? Url("row.min.css") : Url("row.css");
                             
                        public static readonly string table_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/table.min.css") ? Url("table.min.css") : Url("table.css");
                             
                    }
                
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class js {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/table/js";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string cell_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cell.min.js") ? Url("cell.min.js") : Url("cell.js");
                        public static readonly string merge_cells_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/merge_cells.min.js") ? Url("merge_cells.min.js") : Url("merge_cells.js");
                        public static readonly string row_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/row.min.js") ? Url("row.min.js") : Url("row.js");
                        public static readonly string table_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/table.min.js") ? Url("table.min.js") : Url("table.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class langs {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/table/langs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string en_dlg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en_dlg.min.js") ? Url("en_dlg.min.js") : Url("en_dlg.js");
                    }
                
                    public static readonly string merge_cells_htm = Url("merge_cells.htm");
                    public static readonly string row_htm = Url("row.htm");
                    public static readonly string table_htm = Url("table.htm");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class template {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/template";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string blank_htm = Url("blank.htm");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class css {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/template/css";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string template_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/template.min.css") ? Url("template.min.css") : Url("template.css");
                             
                    }
                
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class js {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/template/js";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string template_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/template.min.js") ? Url("template.min.js") : Url("template.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class langs {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/template/langs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string en_dlg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en_dlg.min.js") ? Url("en_dlg.min.js") : Url("en_dlg.js");
                    }
                
                    public static readonly string template_htm = Url("template.htm");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class visualchars {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/visualchars";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class wordcount {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/wordcount";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class xhtmlxtras {
                    private const string URLPATH = "~/Scripts/tiny_mce/plugins/xhtmlxtras";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string abbr_htm = Url("abbr.htm");
                    public static readonly string acronym_htm = Url("acronym.htm");
                    public static readonly string attributes_htm = Url("attributes.htm");
                    public static readonly string cite_htm = Url("cite.htm");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class css {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/xhtmlxtras/css";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string attributes_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/attributes.min.css") ? Url("attributes.min.css") : Url("attributes.css");
                             
                        public static readonly string popup_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/popup.min.css") ? Url("popup.min.css") : Url("popup.css");
                             
                    }
                
                    public static readonly string del_htm = Url("del.htm");
                    public static readonly string editor_plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin.min.js") ? Url("editor_plugin.min.js") : Url("editor_plugin.js");
                    public static readonly string editor_plugin_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_plugin_src.min.js") ? Url("editor_plugin_src.min.js") : Url("editor_plugin_src.js");
                    public static readonly string ins_htm = Url("ins.htm");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class js {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/xhtmlxtras/js";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string abbr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/abbr.min.js") ? Url("abbr.min.js") : Url("abbr.js");
                        public static readonly string acronym_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/acronym.min.js") ? Url("acronym.min.js") : Url("acronym.js");
                        public static readonly string attributes_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/attributes.min.js") ? Url("attributes.min.js") : Url("attributes.js");
                        public static readonly string cite_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cite.min.js") ? Url("cite.min.js") : Url("cite.js");
                        public static readonly string del_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/del.min.js") ? Url("del.min.js") : Url("del.js");
                        public static readonly string element_common_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/element_common.min.js") ? Url("element_common.min.js") : Url("element_common.js");
                        public static readonly string ins_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ins.min.js") ? Url("ins.min.js") : Url("ins.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class langs {
                        private const string URLPATH = "~/Scripts/tiny_mce/plugins/xhtmlxtras/langs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string en_dlg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en_dlg.min.js") ? Url("en_dlg.min.js") : Url("en_dlg.js");
                    }
                
                }
            
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class themes {
                private const string URLPATH = "~/Scripts/tiny_mce/themes";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class advanced {
                    private const string URLPATH = "~/Scripts/tiny_mce/themes/advanced";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string about_htm = Url("about.htm");
                    public static readonly string anchor_htm = Url("anchor.htm");
                    public static readonly string charmap_htm = Url("charmap.htm");
                    public static readonly string color_picker_htm = Url("color_picker.htm");
                    public static readonly string editor_template_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_template.min.js") ? Url("editor_template.min.js") : Url("editor_template.js");
                    public static readonly string editor_template_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_template_src.min.js") ? Url("editor_template_src.min.js") : Url("editor_template_src.js");
                    public static readonly string image_htm = Url("image.htm");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class img {
                        private const string URLPATH = "~/Scripts/tiny_mce/themes/advanced/img";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string colorpicker_jpg = Url("colorpicker.jpg");
                        public static readonly string icons_gif = Url("icons.gif");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class js {
                        private const string URLPATH = "~/Scripts/tiny_mce/themes/advanced/js";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string about_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/about.min.js") ? Url("about.min.js") : Url("about.js");
                        public static readonly string anchor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/anchor.min.js") ? Url("anchor.min.js") : Url("anchor.js");
                        public static readonly string charmap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/charmap.min.js") ? Url("charmap.min.js") : Url("charmap.js");
                        public static readonly string color_picker_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/color_picker.min.js") ? Url("color_picker.min.js") : Url("color_picker.js");
                        public static readonly string image_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/image.min.js") ? Url("image.min.js") : Url("image.js");
                        public static readonly string link_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/link.min.js") ? Url("link.min.js") : Url("link.js");
                        public static readonly string source_editor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/source_editor.min.js") ? Url("source_editor.min.js") : Url("source_editor.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class langs {
                        private const string URLPATH = "~/Scripts/tiny_mce/themes/advanced/langs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                        public static readonly string en_dlg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en_dlg.min.js") ? Url("en_dlg.min.js") : Url("en_dlg.js");
                    }
                
                    public static readonly string link_htm = Url("link.htm");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class skins {
                        private const string URLPATH = "~/Scripts/tiny_mce/themes/advanced/skins";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class @default {
                            private const string URLPATH = "~/Scripts/tiny_mce/themes/advanced/skins/default";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string content_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/content.min.css") ? Url("content.min.css") : Url("content.css");
                                 
                            public static readonly string dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog.min.css") ? Url("dialog.min.css") : Url("dialog.css");
                                 
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class img {
                                private const string URLPATH = "~/Scripts/tiny_mce/themes/advanced/skins/default/img";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string buttons_png = Url("buttons.png");
                                public static readonly string items_gif = Url("items.gif");
                                public static readonly string menu_arrow_gif = Url("menu_arrow.gif");
                                public static readonly string menu_check_gif = Url("menu_check.gif");
                                public static readonly string progress_gif = Url("progress.gif");
                                public static readonly string tabs_gif = Url("tabs.gif");
                            }
                        
                            public static readonly string ui_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui.min.css") ? Url("ui.min.css") : Url("ui.css");
                                 
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class o2k7 {
                            private const string URLPATH = "~/Scripts/tiny_mce/themes/advanced/skins/o2k7";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string content_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/content.min.css") ? Url("content.min.css") : Url("content.css");
                                 
                            public static readonly string dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog.min.css") ? Url("dialog.min.css") : Url("dialog.css");
                                 
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class img {
                                private const string URLPATH = "~/Scripts/tiny_mce/themes/advanced/skins/o2k7/img";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string button_bg_png = Url("button_bg.png");
                                public static readonly string button_bg_black_png = Url("button_bg_black.png");
                                public static readonly string button_bg_silver_png = Url("button_bg_silver.png");
                            }
                        
                            public static readonly string ui_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui.min.css") ? Url("ui.min.css") : Url("ui.css");
                                 
                            public static readonly string ui_black_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui_black.min.css") ? Url("ui_black.min.css") : Url("ui_black.css");
                                 
                            public static readonly string ui_silver_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui_silver.min.css") ? Url("ui_silver.min.css") : Url("ui_silver.css");
                                 
                        }
                    
                    }
                
                    public static readonly string source_editor_htm = Url("source_editor.htm");
                }
            
            }
        
            public static readonly string tiny_mce_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tiny_mce.min.js") ? Url("tiny_mce.min.js") : Url("tiny_mce.js");
            public static readonly string tiny_mce_popup_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tiny_mce_popup.min.js") ? Url("tiny_mce_popup.min.js") : Url("tiny_mce_popup.js");
            public static readonly string tiny_mce_src_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tiny_mce_src.min.js") ? Url("tiny_mce_src.min.js") : Url("tiny_mce_src.js");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class utils {
                private const string URLPATH = "~/Scripts/tiny_mce/utils";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string editable_selects_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editable_selects.min.js") ? Url("editable_selects.min.js") : Url("editable_selects.js");
                public static readonly string form_utils_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/form_utils.min.js") ? Url("form_utils.min.js") : Url("form_utils.js");
                public static readonly string mctabs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mctabs.min.js") ? Url("mctabs.min.js") : Url("mctabs.js");
                public static readonly string validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/validate.min.js") ? Url("validate.min.js") : Url("validate.js");
            }
        
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string bootstrap_theme_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-theme.min.css") ? Url("bootstrap-theme.min.css") : Url("bootstrap-theme.css");
             
        public static readonly string bootstrap_theme_css_map = Url("bootstrap-theme.css.map");
        public static readonly string bootstrap_theme_min_css = Url("bootstrap-theme.min.css");
        public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
             
        public static readonly string bootstrap_css_map = Url("bootstrap.css.map");
        public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
        public static readonly string custom_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/custom.min.css") ? Url("custom.min.css") : Url("custom.css");
             
        public static readonly string jquery_autocomplete_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.autocomplete.min.css") ? Url("jquery.autocomplete.min.css") : Url("jquery.autocomplete.css");
             
        public static readonly string lightbox_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lightbox.min.css") ? Url("lightbox.min.css") : Url("lightbox.css");
             
        public static readonly string shCoreDefault_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shCoreDefault.min.css") ? Url("shCoreDefault.min.css") : Url("shCoreDefault.css");
             
        public static readonly string Site_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Site.min.css") ? Url("Site.min.css") : Url("Site.css");
             
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class gx {
        private const string URLPATH = "~/gx";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string avatar_png = Url("avatar.png");
        public static readonly string chart_png = Url("chart.png");
        public static readonly string edit_png = Url("edit.png");
        public static readonly string image_png = Url("image.png");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class lightbox {
            private const string URLPATH = "~/gx/lightbox";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string blank_gif = Url("blank.gif");
            public static readonly string close_gif = Url("close.gif");
            public static readonly string closelabel_gif = Url("closelabel.gif");
            public static readonly string loading_gif = Url("loading.gif");
            public static readonly string next_gif = Url("next.gif");
            public static readonly string nextlabel_gif = Url("nextlabel.gif");
            public static readonly string prev_gif = Url("prev.gif");
            public static readonly string prevlabel_gif = Url("prevlabel.gif");
        }
    
        public static readonly string rss_png = Url("rss.png");
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591, 3008, 3009


