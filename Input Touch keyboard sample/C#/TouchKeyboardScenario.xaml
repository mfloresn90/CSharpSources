<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="TouchKeyboard.TouchKeyboardScenario"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:TouchKeyboard"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <StackPanel>
                <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" Text="When using XAML controls that accept input (i.e. TextBox, RichTextBox, PasswordBox), the Touch Keyboard will invoke automatically when the user taps on the control using touch or pen. This behavior also holds for controls that are derived from these classes.&#13;&#13;For custom controls that require keyboard input and are not derived from one of the previously mentioned controls, one needs to implement the following UI Automation Control Pattern interfaces: the TextPattern provider interface (ITextProvider) and the ValuePattern provider interface (IValueProvider). This will ensure that the touch Keyboard will invoke when a user taps on the custom control. &#13;&#13;See TouchKeyboardScenario.xaml.cs (output area), CustomControl1.xaml.cs (Extended Textbox and CustomControl1) and CustomControl2.xaml.cs (CustomControls2) for the code required in this example."></TextBlock>
                <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" FontStyle="Italic" Text="Note that the two custom controls are not real implementations of a text control; they merely log a keypress instead of displaying the typed character."></TextBlock>
            </StackPanel>
            
            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputFullScreenLandscape"/>
                    <VisualState x:Name="InputFilled"/>
                    <VisualState x:Name="InputFullScreenPortrait"/>
                    <VisualState x:Name="InputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Width="300" HorizontalAlignment="Left" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" Text="XAML TextBox: "></TextBlock>
                    <TextBox Name="textBox" Margin="2" Height="40" Width="200" Padding="5" AutomationProperties.Name="XAML Text Box"></TextBox>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Width="300" HorizontalAlignment="Left" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" Text="Extended TextBox control (derived from TextBox Class): "></TextBlock>
                    <local:CustomTextBox Margin="2"  Height="40" Width="200" AutomationProperties.Name="Extended XAML Text Box"></local:CustomTextBox>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Width="300" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" Text="Custom control 1 (without Text/Value Pattern inplementation): "></TextBlock>
                    <local:CustomInputBox1 Margin="2" AutomationProperties.Name="Custom Text Box 1" AutomationProperties.AutomationId="Custom_Text_Box_1" 
                    AutomationProperties.HelpText="Display text to indicate when a key is pressed.  Content is cleared when focus moves away from the field." >
                    </local:CustomInputBox1>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Width="300" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" Text="Custom control 2 (with Text/Value Pattern inplementation): "></TextBlock>
                    <local:CustomInputBox2 Name="DemoInputBox1" Margin="2" AutomationProperties.Name="Custom Text Box 2" AutomationProperties.AutomationId="Custom_Text_Box_2" 
                     AutomationProperties.HelpText="Display text to indicate when a key is pressed.  Content is cleared when focus moves away from the field.">
                    </local:CustomInputBox2>
                </StackPanel>
            </StackPanel>
            
            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="OutputFullScreenLandscape"/>
                    <VisualState x:Name="OutputFilled"/>
                    <VisualState x:Name="OutputFullScreenPortrait"/>
                    <VisualState x:Name="OutputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
     </Grid>
</common:LayoutAwarePage>
