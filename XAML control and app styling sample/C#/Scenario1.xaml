<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="ControlAndAppStyle.Scenario1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:ControlAndAppStyle"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1"  TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                You can apply styling to any element of type FrameworkElement, including subclasses of FrameworkElement. This means that almost all XAML elements support the Style property. You can use the design tools in Visual Studio and Blend to create and apply styles.
                <LineBreak/><LineBreak/>You can set a Style property directly on an element, or you can add a Style element to a ResourceDictionary. If you add a Style element to a ResourceDictionary, you can set the x:Key and TargetType properties, or you can set just the TargetType property. A Style element with an x:Key setting is an explicit style, and you must reference it by name to apply it to another element. A Style element with just a TargetType setting is an implicit style that is applied automatically to all elements in the same scope as the style that have the specified type. 
                <LineBreak/><LineBreak/>
                The output below uses a Style element in multiple ways - explicit, implicit, and in different scopes. Click the buttons below to see each example.
            </TextBlock>
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0" Grid.Row="1" x:Name="buttonOptionsPanel">
                <Button x:Name="styleKeydInResource" Content="Using Style with key" Margin="0,0,10,10" Click="styleKeydInResource_Click"/>
                <Button x:Name="implicitStyle" Content="Implicit Style" Margin="0,0,10,10" Click="implicitStyle_Click"/>
                <Button x:Name="implicitStyleScoped" Content="Implicit Style scoped" Margin="0,0,10,10" Click="implicitStyleScoped_Click"/>
                <Button x:Name="implicitStyleInApp" Content="Implicit Style in App.xaml" Margin="0,0,10,10" Click="implicitStyleInApp_Click"/>
            </StackPanel>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputDefaultLayout"/>
                    <VisualState x:Name="InputFullScreenPortrait">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="buttonOptionsPanel" Storyboard.TargetProperty="Orientation" Duration="0">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Orientation>Vertical</Orientation>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="InputBelow768Layout">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="buttonOptionsPanel" Storyboard.TargetProperty="Orientation" Duration="0">
                                <DiscreteObjectKeyFrame KeyTime="0">
                                    <DiscreteObjectKeyFrame.Value>
                                        <Orientation>Vertical</Orientation>
                                    </DiscreteObjectKeyFrame.Value>
                                </DiscreteObjectKeyFrame>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
            <!--Output for part 1 of 4-->
            <Grid x:Name="styleKeydInResource_Output" Visibility="Collapsed">
                <Grid.Resources>
                    <Style TargetType="Button" x:Key="myButtonStyle">
                        <Setter Property="Width" Value="200"/>
                        <Setter Property="Height" Value="100"/>
                        <Setter Property="Content" Value="Hello World"/>
                        <Setter Property="FontFamily" Value="Segoe Script"/>
                    </Style>
                    <Style TargetType="Rectangle" x:Key="myRectangleStyle">
                        <Setter Property="Width" Value="200"/>
                        <Setter Property="Height" Value="100"/>
                        <Setter Property="Stroke" Value="Green"/>
                        <Setter Property="StrokeThickness" Value="5"/>
                    </Style>
                </Grid.Resources>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <StackPanel Grid.Column="0" Margin="0,0,10,0">
                    <Button Style="{StaticResource myButtonStyle}" Margin="0,0,0,10" />
                    <Rectangle Style="{StaticResource myRectangleStyle}"/>
                </StackPanel>
                <TextBlock Grid.Column="1" Style="{StaticResource BasicTextStyle}" MaxWidth="400" TextWrapping="Wrap">
                        The elements used in this output are styled using the Style tag associated to a resource key. The Style is defined in a ResourceDictionary and given a key name.
                </TextBlock>
            </Grid>
            <!--Output for part 2 of 4-->
            <Grid x:Name="implicitStyle_Output" Visibility="Collapsed">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <StackPanel Grid.Column="0" Margin="0,0,10,0">
                    <ToggleButton Margin="0,0,0,10" />
                    <Ellipse />
                </StackPanel>
                <TextBlock Grid.Column="1" Style="{StaticResource BasicTextStyle}" MaxWidth="400" TextWrapping="Wrap">
                        The elements used in this output have an implicit style applied which is defined in MainPage.Xaml's ResourceDictionary. Any usage of the target element type will use that implicit style (unless there is an overriding style applied.)
                </TextBlock>
            </Grid>
            <!--Output for part 3 of 4-->
            <Grid x:Name="implicitStyleScoped_Output" Visibility="Collapsed">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <StackPanel Grid.Column="0" Margin="0,0,10,0">
                    <StackPanel Orientation="Horizontal">
                        <StackPanel.Resources>
                            <Style TargetType="CheckBox">
                                <Setter Property="Content" Value="Implicit locally scoped 1"/>
                                <Setter Property="FontFamily" Value="Arial Black"/>
                                <Setter Property="Background" Value="LightGray" />
                            </Style>
                            <Style TargetType="Ellipse">
                                <Setter Property="Stroke" Value="Red"/>
                                <Setter Property="Width" Value="100"/>
                                <Setter Property="Height" Value="100"/>
                                <Setter Property="StrokeThickness" Value="10"/>
                            </Style>
                        </StackPanel.Resources>
                        <CheckBox Margin="0,0,0,10" />
                        <Ellipse />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <StackPanel.Resources>
                            <Style TargetType="CheckBox">
                                <Setter Property="Content" Value="Implicit locally scoped 2"/>
                                <Setter Property="FontFamily" Value="Comic Sans MS"/>
                                <Setter Property="Background" Value="LightCoral" />
                            </Style>
                            <Style TargetType="Ellipse">
                                <Setter Property="Stroke" Value="Blue"/>
                                <Setter Property="Width" Value="100"/>
                                <Setter Property="Height" Value="100"/>
                                <Setter Property="StrokeThickness" Value="5"/>
                            </Style>
                        </StackPanel.Resources>
                        <CheckBox Margin="0,0,0,10" />
                        <Ellipse />
                    </StackPanel>
                </StackPanel>
                <TextBlock Grid.Column="1" Style="{StaticResource BasicTextStyle}" MaxWidth="400" TextWrapping="Wrap">
                        The elements used in this output have an implicit style applied but are scoped to the parent container's ResourceDictionary. Any usage of the target element type will use that implicit style but only in the scope of the parent.
                </TextBlock>
            </Grid>
            <!--Output for part 4 of 4-->
            <Grid x:Name="implicitStyleInApp_Output" Visibility="Collapsed">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <StackPanel Grid.Column="0" Margin="0,0,10,0">
                    <RadioButton Margin="0,0,0,10" />
                </StackPanel>
                <TextBlock Grid.Column="1" Style="{StaticResource BasicTextStyle}" MaxWidth="400" TextWrapping="Wrap">
                        The RadioButton element used in this output has an implicit style which is defined in App.Xaml's ResourceDictionary. All usage of the RadioButton tag in the app will use that implicit style (unless there is an overriding style applied.)
                </TextBlock>
            </Grid>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="OutputDefaultLayout"/>
                    <VisualState x:Name="OutputBelow768Layout"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </Grid>
</common:LayoutAwarePage>
