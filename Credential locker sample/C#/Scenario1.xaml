<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="PasswordVault.Scenario1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:PasswordVault"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top" Height="494">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1"  TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" >
                This scenario provides an example when an app wishes to store/retrieve/remove a password from PasswordVault. <LineBreak></LineBreak>
                1. To add a credential, fill the resource, username and password, click "Save Credential", then a credential will be added to PasswordVault.<LineBreak></LineBreak>
                2. To search a credential, fill resource or username, or both, click "Read Credential", then the search result will be returned. <LineBreak></LineBreak>
                3. To remove a credential, fill both resouce and username, then click "Delete Credential", then the credential will be removed from PasswordVault. <LineBreak></LineBreak>
                Note: This scenario also demonstrates initializing the PasswordVault asynchronously, for cases in which the first call to the PasswordVault may take a 
                little more time. Also due to credential isolation, this sample only can access credentials written by itself, it cannot access any credentials created by 
                other apps or processes.
            </TextBlock>

            <StackPanel Orientation="Vertical" Margin="0,10,0,0" Grid.Row="1">
                <StackPanel Orientation="Horizontal" Margin="0,10,0,0" Height="64">
                    <Button x:Name="ResetScenario1" Content="Reset Scenario" Click="Reset_Click" AutomationProperties.AutomationId="ResetButton"/>
                </StackPanel>

                <StackPanel Margin="0,0,-98,0">
                    <StackPanel Orientation="Vertical">
                        <Canvas VerticalAlignment="Center" Height="40" Margin="10,0,0,0" >
                            <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}"  Text="Resource : " VerticalAlignment="Center" Width="88" Canvas.Left="-10" Canvas.Top="10"/>
                            <TextBox x:Name="InputResourceValue" Width="188" Height="30" Canvas.Left="108" AutomationProperties.AutomationId="InputResourceValue"/>
                            <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}"  Text="e.g. https://facebook.com " VerticalAlignment="Center" Width="218" Canvas.Left="350" Canvas.Top="10"/>
                        </Canvas>
                    </StackPanel>
                    <StackPanel Orientation="Vertical">
                        <Canvas VerticalAlignment="Center" Height="40" Margin="10,0,0,0" >
                            <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}"  Text="User Name : " VerticalAlignment="Center" Width="88" Canvas.Left="-10" Canvas.Top="10"/>
                            <TextBox x:Name="InputUserNameValue" Width="188" Height="30" Canvas.Left="108" AutomationProperties.AutomationId="InputUserNameValue"/>
                            <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}"  Text="e.g. abby@live.com" VerticalAlignment="Center" Width="218" Canvas.Left="350" Canvas.Top="10"/>
                        </Canvas>
                    </StackPanel>
                    <StackPanel Orientation="Vertical">
                        <Canvas VerticalAlignment="Center" Height="40" Margin="10,0,0,0">
                            <TextBlock TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}"  Text="Password:" VerticalAlignment="Center" Width="88" Canvas.Left="-10" Canvas.Top="10"/>
                            <PasswordBox x:Name="InputPasswordValue" Width="188" Height="30" Canvas.Left="108" AutomationProperties.AutomationId="InputPasswordValue"/>
                        </Canvas>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal"  Margin="0,0,0,0" Height="64">
                        <Button x:Name="SaveCredButton" AutomationProperties.AutomationId="SaveCredButton" Content="Save Credential" Click="Save_Click" Margin="0,15" RenderTransformOrigin="1.812,0.532" Width="171"/>
                        <Button x:Name="ReadCredButton" AutomationProperties.AutomationId="ReadCredButton" Content="Read Credential" Click="Read_Click" Margin="0,15" RenderTransformOrigin="1.812,0.532" Width="171"/>
                        <Button x:Name="DeleteCredButton" AutomationProperties.AutomationId="DeleteCredButton" Content="Delete Credential" Click="Delete_Click" Margin="0,15" RenderTransformOrigin="1.812,0.532" Width="171"/>
                    </StackPanel>
                </StackPanel>
            </StackPanel>


            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputDefaultLayout"/>
                    <VisualState x:Name="InputBelow768Layout"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1" Height="279" Width="641">

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
            <StackPanel Margin="0,0,0,0">
              
                <StackPanel Orientation="Vertical">
                    <Canvas VerticalAlignment="Top" Height="40" Margin="0,0,0,0">
                        <TextBox x:Name="ErrorMessage" AutomationProperties.AutomationId="ErrorMessage" HorizontalAlignment="Left" Height="127" TextWrapping="Wrap" Text="" VerticalAlignment="Top" Width="1014" Canvas.Left="102"/>
                    </Canvas>
                </StackPanel>
            </StackPanel>
        </Grid>

    </Grid>
</common:LayoutAwarePage>
