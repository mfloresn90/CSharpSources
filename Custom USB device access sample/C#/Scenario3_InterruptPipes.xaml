<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="CustomUsbDeviceAccess.InterruptPipes"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:CustomUsbDeviceAccess"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <StackPanel x:Name="DeviceScenarioContainer" Orientation="Vertical" Margin="0,10,0,0" Grid.Row="0">
              <StackPanel x:Name="OsrFx2Scenario" Orientation="Vertical">
                <TextBlock x:Name="OsrFx2ScenarioText" Grid.Row="0" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                    This scenario shows how to read the switch state and register for a switch state change event from the device. If the device is disconnected and reconnected, you must reregister for
                    the event because it is not automatically done.
                </TextBlock>
                <Button x:Name="ButtonRegisterOsrFx2InterruptEvent" Content="Register For Interrupt Event" Click="RegisterOsrFx2InterruptEvent_Click"/>
              </StackPanel>
              <StackPanel x:Name="SuperMuttScenario" Orientation="Vertical">
                <TextBlock x:Name="SuperMuttScenarioText" Grid.Row="0" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
                    This scenario shows how to register for an event from a device's interrupt in pipe and how to write to an interrupt out pipe. If the device is disconnected and reconnected, you must reregister for
                    the event because it is not automatically done.
                </TextBlock>
                <Button x:Name="ButtonWriteSuperMuttInterruptOut" Content="Write To Interrupt Out" Click="WriteSuperMuttInterruptOut_Click"/>
                <Button x:Name="ButtonRegisterSuperMuttInterruptEvent" Content="Register For Interrupt Event" Click="RegisterSuperMuttInterruptEvent_Click"/>
              </StackPanel>
              <Button x:Name="ButtonUnregisterInterruptEvent" Content="Unregister From Interrupt Event" Click="UnregisterInterruptEvent_Click"/>
            </StackPanel>
            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputFullScreenLandscape"/>
                    <VisualState x:Name="InputFilled"/>
                    <VisualState x:Name="InputFullScreenPortrait"/>
                    <VisualState x:Name="InputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" Grid.Row="1">
            <TextBlock x:Name="SwitchStates" FontFamily="Consolas" Style="{StaticResource BodyTextStyle}"></TextBlock>
          
            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="OutputFullScreenLandscape"/>
                    <VisualState x:Name="OutputFilled"/>
                    <VisualState x:Name="OutputFullScreenPortrait"/>
                    <VisualState x:Name="OutputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </Grid>
</common:LayoutAwarePage>
