<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<Page
    x:Class="RequestedTheme.Scenario1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:RequestedTheme"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1"  TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" >
            	<Run Text="The UI Theme of the XAML application (Light or Dark) is set up in the RequestedTheme property of the Application. All UI Elements of this application will use this selected theme. There is also a RequestedTheme property on FrameworkElement objects that enables you to change the UI theme that will be applied to itself and all its children. "/>
            	<LineBreak/>
            	<Run Text=" Since the StaticResources are only evaluated at parse time, it is impossible to map it to different themes based on a current theme at the FrameworkElement. We will use the {ThemeResource} markup extension that references resources that needs to be re-evaluated when theme changes. "/>
            	<LineBreak/>
            	<Run Text=" An element that sets the theme must set a background property, otherwise no background is drawn and the ancestor's background will be seen."/>
            </TextBlock>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputFullScreenLandscape"/>
                    <VisualState x:Name="InputFilled"/>
                    <VisualState x:Name="InputFullScreenPortrait"/>
                    <VisualState x:Name="InputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">

            <StackPanel>
                <TextBlock Text="Theme selected via Application's RequestedTheme."/>
                <StackPanel  RequestedTheme="Dark" Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
                    <TextBlock Text="Dark theme set via FrameworkElement's RequestedTheme."/>
                    <StackPanel RequestedTheme="Light" Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" >
                        <TextBlock  Text="Light theme set via FrameworkElement's RequestedTheme."/>
                        <StackPanel RequestedTheme="Dark" Background="{ThemeResource ApplicationPageBackgroundThemeBrush}" >
                            <TextBlock  Text="Dark theme set via FrameworkElement's RequestedTheme."/>
                        </StackPanel>
                        <TextBlock Text="Light theme set via FrameworkElement's RequestedTheme."/>
                    </StackPanel>
                </StackPanel>
            </StackPanel>


            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the output section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="OutputFullScreenLandscape"/>
                    <VisualState x:Name="OutputFilled"/>
                    <VisualState x:Name="OutputFullScreenPortrait"/>
                    <VisualState x:Name="OutputSnapped"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
     </Grid>
</Page>
