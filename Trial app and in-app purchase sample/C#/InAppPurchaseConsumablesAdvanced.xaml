<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
-->
<common:LayoutAwarePage
    x:Class="Store.InAppPurchaseConsumablesAdvanced"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Store"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                </Grid.RowDefinitions>
                <TextBlock Grid.Row="0" x:Name="ScenarioTitle" Style="{StaticResource TitleTextStyle}" Text="Advanced consumable product scenario" Margin="0,10,0,10"/>
                <TextBlock Grid.Row="1"  Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="This scenario shows two different consumable in-app products. Consumable products require both a purchase call and a fulfillment call per purchase. This scenario shows the calls happening separately for demonstration purposes only; DO NOT require a user action for fulfillment in your app." />
                <StackPanel Grid.Row="2" Orientation="Vertical" Margin="0,10,0,0">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="175"/>
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="30px" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                        </Grid.RowDefinitions>
                        <!-- Buy product 1 -->
                        <Button VerticalAlignment="Top" Grid.Row="0" Grid.Column="0" Width="150" x:Name="BuyProduct1Button" Content="Buy product 1" ToolTipService.ToolTip="Display the in-app purchase dialog box for product 1. This will not make the fulfillment call." Margin="0,0,0,10" Click="BuyProduct1Button_Click"/>
                        <Grid Grid.Row="0" Grid.Column="1">
                            <Grid.RowDefinitions>
                                <RowDefinition  Height="auto" />
                                <RowDefinition  Height="auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Row="0" Grid.Column="0" x:Name="Product1SellDesc" Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="Display the purchase dialog box to buy product 1. Do not immediately call the fulfillment method. Query the Store API to get the in-app offer information and show it here:" />
                            <TextBlock Grid.Row="1" Grid.Column="0" x:Name="Product1SellMessage" Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="" />
                        </Grid>
                        <!-- Get unfulfilled -->
                        <Button VerticalAlignment="Top" Grid.Row="1" Grid.Column="0" Width="150" Height="auto"  x:Name="GetUnfulfilledButton1" ToolTipService.ToolTip="Display unfulfilled consumables." Margin="0,0,0,10" Click="GetUnfulfilledButton1_Click">
                            <TextBlock Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="Get unfulfilled consumables" />
                        </Button>
                        <Grid Grid.Row="1" Grid.Column="1">
                            <Grid.RowDefinitions>
                                <RowDefinition  Height="auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Row="0" Grid.Column="0" x:Name="GetUnfulfilledButton1Desc" Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="Check to see if there are unfulfilled consumables waiting to be fulfilled. Display the result in the output area." />
                        </Grid>
                        <!-- Fulfill product 1 -->
                        <Button VerticalAlignment="Top" Grid.Row="2" Grid.Column="0" Width="150" x:Name="FulfillProduct1Button" Content="Fulfill product 1" ToolTipService.ToolTip="Complete the fulfillment call for product 1." Margin="0,0,0,10" Click="FulfillProduct1Button_Click"/>
                        <Grid Grid.Row="2" Grid.Column="1">
                            <Grid.RowDefinitions>
                                <RowDefinition  Height="auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Row="0" Grid.Column="0" x:Name="FulfillProduct1ButtonDesc" Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="Call the fulfillment method for product 1." />
                        </Grid>
                        <!-- Buy product 2 -->
                        <Button VerticalAlignment="Top" Grid.Row="4" Grid.Column="0" Width="150" x:Name="BuyProduct2Button" Content="Buy product 2" ToolTipService.ToolTip="Display the in-app purchase dialog box for product 2. This will not make the fulfillment call." Margin="0,0,0,10" Click="BuyProduct2Button_Click"/>
                        <Grid Grid.Row="4" Grid.Column="1">
                            <Grid.RowDefinitions>
                                <RowDefinition  Height="auto" />
                                <RowDefinition  Height="auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Row="0" Grid.Column="0" x:Name="Product2SellDesc" Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="Display the purchase dialog box to buy product 2. Do not immediately call the fulfillment method. Query the Store API to get the in-app offer information and show it here:" />
                            <TextBlock Grid.Row="1" Grid.Column="0" x:Name="Product2SellMessage" Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="" />
                        </Grid>
                        <!-- Get unfulfilled -->
                        <Button VerticalAlignment="Top" Grid.Row="5" Grid.Column="0" Width="150" Height="auto"  x:Name="GetUnfulfilledButton2" ToolTipService.ToolTip="Display unfulfilled consumables." Margin="0,0,0,10" Click="GetUnfulfilledButton2_Click">
                            <TextBlock Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="Get unfulfilled consumables" />
                        </Button>
                        <Grid Grid.Row="5" Grid.Column="1">
                            <Grid.RowDefinitions>
                                <RowDefinition  Height="auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Row="0" Grid.Column="0" x:Name="GetUnfulfilledButton2Desc" Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="Check to see if there are unfulfilled consumables waiting to be fulfilled. Display the result in the output area." />
                        </Grid>
                        <!-- Fulfill product 2 -->
                        <Button VerticalAlignment="Top" Grid.Row="6" Grid.Column="0" Width="150" x:Name="FulfillProduct2Button" Content="Fulfill product 2" ToolTipService.ToolTip="Complete the fulfillment call for product 2." Margin="0,0,0,10" Click="FulfillProduct2Button_Click"/>
                        <Grid Grid.Row="6" Grid.Column="1">
                            <Grid.RowDefinitions>
                                <RowDefinition  Height="auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Row="0" Grid.Column="0" x:Name="FulfillProduct2ButtonDesc" Style="{StaticResource BasicTextStyle}" TextWrapping="Wrap" Text="Call the fulfillment method for product 2." />
                        </Grid>
                    </Grid>
                </StackPanel>
            </Grid>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="1">
        </Grid>

        <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="DefaultLayout"/>
                <VisualState x:Name="Below768Layout"/>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

    </Grid>
</common:LayoutAwarePage>
