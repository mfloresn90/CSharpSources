<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<Page
    x:Class="CustomDeviceAccess.DeviceReadWrite"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:CustomDeviceAccess"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White" HorizontalAlignment="Left" VerticalAlignment="Top">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1"  TextWrapping="Wrap" Grid.Row="0" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left" >
            	<Run Text="This scenario shows how to use the InputStream and OutputStream properties of Windows.Devices.Custom.CustomDevice to send read and write commands to the device driver."/>
            	<LineBreak/>
            	<Run/>
            	<LineBreak/>
            	<Run Text="The Write Block button writes a message to the Fx2 device's internal memory, and the call to WriteAsync completes once the driver has committed the data to the device.  The device has four message buffers, and once they are full the next write will be blocked until a buffer is free."/>
            	<LineBreak/>
            	<Run/>
            	<LineBreak/>
            	<Run Text="  The Read Button reads a message from the memory.  The read operation will block if no messages are available, otherwise the driver will read one message and free the slot.  This may allow a pending write to complete."/>
            	<LineBreak/>
            	<Run/>
            	<LineBreak/>
            	<Run Text="The Read Block and Write Block buttons will be disabled until the read or write they trigger completes."/>
            </TextBlock>
            <StackPanel Orientation="Horizontal" Margin="0,10,0,0" Grid.Row="1">
                <Button x:Name="ReadBlock"   Content="Read Block" Margin="0,0,10,0"  Click="ReadBlock_Click"/>
                <Button x:Name="WriteBlock"  Content="Write Block" Margin="0,0,10,0" Click="WriteBlock_Click"/>
            </StackPanel>
            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputDefaultLayout"/>
                    <VisualState x:Name="InputBelow768Layout"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" HorizontalAlignment="Stretch" VerticalAlignment="Top" Grid.Row="1">
            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="OutputDefaultLayout"/>
                    <VisualState x:Name="OutputBelow768Layout"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <StackPanel Orientation="Vertical" Margin="0,10,0,0">
                <TextBlock Style="{ThemeResource SubheaderTextBlockStyle}">Output Log:</TextBlock>
                <TextBlock x:Name="OutputText" MinHeight="300" Padding="0,10,0,0" FontFamily="Consolas"/>
            </StackPanel>
        </Grid>
    </Grid>
</Page>
