<!--
//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
//
//*********************************************************
-->
<Page
    x:Class="CustomDeviceAccess.DeviceEvents"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:CustomDeviceAccess"
    xmlns:common="using:SDKTemplate.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Grid x:Name="LayoutRoot" Background="White">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid x:Name="Input" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <TextBlock x:Name="InputTextBlock1" Grid.Row="0" TextWrapping="Wrap" Style="{StaticResource BasicTextStyle}" HorizontalAlignment="Left">
        		<Run Text="This scenario shows how to use SendIOControlAsync to receive asynchronous events from the device driver. "/>
        		<LineBreak/>
        		<LineBreak/>
        		<Run Text="The Begin Receiving Switch Change Events button below sends an get interrupt message IO control to the driver.  The driver completes this only when the DIP switches on the Fx2 have changed.  On completion the sample code updates the UI and then issues another get interrupt IO control.  The Stop Receiving Switch Change Events button cancels the pending IO control.  The IO control is also canceled if the scenario is changed.  If the device is unplugged or disconnected the pending IO control completes with an error, and the sample code stops retrieving events."/>
        		<LineBreak/>
        		<LineBreak/>
        		<Run Text="The IO control codes used in this scenario, along with all other driver-defined constants, in the Fx2Driver class (Fx2Driver.cs)."/>
            </TextBlock>
            <StackPanel Orientation="Vertical" Margin="0,10,0,0" Grid.Row="1" Grid.ColumnSpan="1">
                <Button x:Name="deviceEventsGet" Content="Get Switch State from Fx2 Device" Margin="0,0,10,0" Click="deviceEventsGet_Click_1" HorizontalAlignment="Left" Width="300"/>
                <Button x:Name="deviceEventsBegin" Content="Begin Receiving Switch Change Events" Margin="0,0,10,0" Click="deviceEventsBegin_Click_1" HorizontalAlignment="Left" Width="300"/>
                <Button x:Name="deviceEventsCancel" Content="Stop Receiving Switch Change Events" Margin="0,0,10,0" Click="deviceEventsCancel_Click_1" HorizontalAlignment="Left" Width="300"/>
            </StackPanel>

            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="InputDefaultLayout"/>
                    <VisualState x:Name="InputBelow768Layout"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>

        <Grid x:Name="Output" Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <StackPanel Orientation="Vertical">
                <TextBlock x:Name="TextBlock1" TextWrapping="Wrap" Style="{StaticResource BodyTextStyle}"  Text="The switch state will be displayed below.  Bold entries have changed value."/>
                <TextBlock x:Name="deviceEventsSwitches" FontFamily="Consolas" Style="{StaticResource BodyTextStyle}"></TextBlock>
            </StackPanel>
            <!-- Add Storyboards to the visual states below as necessary for supporting the various layouts for the input section -->
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup>
                    <VisualState x:Name="OutputDefaultLayout"/>
                    <VisualState x:Name="OutputBelow768Layout"/>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </Grid>
</Page>
